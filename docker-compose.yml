version: "3.8"

services:
  # Infrastructure Services
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: chatapp_auth
      POSTGRES_USER: chatapp
      POSTGRES_PASSWORD: chatapp
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - chatapp-network

  postgres-users:
    image: postgres:15-alpine
    container_name: postgres-users
    environment:
      POSTGRES_DB: chatapp_users
      POSTGRES_USER: chatapp
      POSTGRES_PASSWORD: chatapp
    ports:
      - "5433:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    networks:
      - chatapp-network

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    environment:
      CASSANDRA_CLUSTER_NAME: chatapp-cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - chatapp-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatapp-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - chatapp-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - chatapp-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - chatapp-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - chatapp-network

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - chatapp-network

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres-auth
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/chatapp_auth
      SPRING_REDIS_HOST: redis
    networks:
      - chatapp-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres-users
      - redis
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-users:5432/chatapp_users
      SPRING_REDIS_HOST: redis
    networks:
      - chatapp-network

  presence-service:
    build:
      context: .
      dockerfile: presence-service/Dockerfile
    container_name: presence-service
    ports:
      - "8083:8083"
    depends_on:
      - redis
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - chatapp-network

  chat-service:
    build:
      context: .
      dockerfile: chat-service/Dockerfile
    container_name: chat-service
    ports:
      - "8084:8084"
    depends_on:
      - cassandra
      - redis
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_CASSANDRA_CONTACT_POINTS: cassandra
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - chatapp-network

  websocket-service:
    build:
      context: .
      dockerfile: websocket-service/Dockerfile
    container_name: websocket-service
    ports:
      - "8085:8085"
    depends_on:
      - redis
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - chatapp-network

volumes:
  postgres_auth_data:
  postgres_users_data:
  cassandra_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  chatapp-network:
    driver: bridge
